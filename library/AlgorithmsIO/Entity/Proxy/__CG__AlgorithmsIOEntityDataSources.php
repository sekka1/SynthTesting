<?php

namespace AlgorithmsIO\Entity\Proxy\__CG__\AlgorithmsIO\Entity;

/**
 * THIS CLASS WAS GENERATED BY THE DOCTRINE ORM. DO NOT EDIT THIS FILE.
 */
class DataSources extends \AlgorithmsIO\Entity\DataSources implements \Doctrine\ORM\Proxy\Proxy
{
    private $_entityPersister;
    private $_identifier;
    public $__isInitialized__ = false;
    public function __construct($entityPersister, $identifier)
    {
        $this->_entityPersister = $entityPersister;
        $this->_identifier = $identifier;
    }
    /** @private */
    public function __load()
    {
        if (!$this->__isInitialized__ && $this->_entityPersister) {
            $this->__isInitialized__ = true;

            if (method_exists($this, "__wakeup")) {
                // call this after __isInitialized__to avoid infinite recursion
                // but before loading to emulate what ClassMetadata::newInstance()
                // provides.
                $this->__wakeup();
            }

            if ($this->_entityPersister->load($this->_identifier, $this) === null) {
                throw new \Doctrine\ORM\EntityNotFoundException();
            }
            unset($this->_entityPersister, $this->_identifier);
        }
    }

    /** @private */
    public function __isInitialized()
    {
        return $this->__isInitialized__;
    }

    
    public function doPrePersist()
    {
        $this->__load();
        return parent::doPrePersist();
    }

    public function doPostPersist()
    {
        $this->__load();
        return parent::doPostPersist();
    }

    public function __call($name, $arguments)
    {
        $this->__load();
        return parent::__call($name, $arguments);
    }

    public function setAttribute($name, $value)
    {
        $this->__load();
        return parent::setAttribute($name, $value);
    }

    public function getAttribute($name)
    {
        $this->__load();
        return parent::getAttribute($name);
    }

    public function getAttributes()
    {
        $this->__load();
        return parent::getAttributes();
    }

    public function setFromArray($data)
    {
        $this->__load();
        return parent::setFromArray($data);
    }

    public function jsonSerialize()
    {
        $this->__load();
        return parent::jsonSerialize();
    }

    public function toArray($entity = NULL)
    {
        $this->__load();
        return parent::toArray($entity);
    }

    public function _debug_to_string($argarray = array (
))
    {
        $this->__load();
        return parent::_debug_to_string($argarray);
    }

    public function debug($msg)
    {
        $this->__load();
        return parent::debug($msg);
    }

    public function warning($msg)
    {
        $this->__load();
        return parent::warning($msg);
    }

    public function error($msg)
    {
        $this->__load();
        return parent::error($msg);
    }

    public function getEntityManager()
    {
        $this->__load();
        return parent::getEntityManager();
    }

    public function setEntityManager(\Doctrine\ORM\EntityManager $em)
    {
        $this->__load();
        return parent::setEntityManager($em);
    }

    public function toJson($entity)
    {
        $this->__load();
        return parent::toJson($entity);
    }

    public function toXml($entity)
    {
        $this->__load();
        return parent::toXml($entity);
    }


    public function __sleep()
    {
        return array('__isInitialized__', 'id', 'name', 'type', 'location', 'filesystem_name', 'version', 'ip_address', 'size', 'description', 'defaultcost', 'defaultcostmethod', 'published', 'created', 'last_modified', 'user', 'jobs', 'attributes');
    }

    public function __clone()
    {
        if (!$this->__isInitialized__ && $this->_entityPersister) {
            $this->__isInitialized__ = true;
            $class = $this->_entityPersister->getClassMetadata();
            $original = $this->_entityPersister->load($this->_identifier);
            if ($original === null) {
                throw new \Doctrine\ORM\EntityNotFoundException();
            }
            foreach ($class->reflFields AS $field => $reflProperty) {
                $reflProperty->setValue($this, $reflProperty->getValue($original));
            }
            unset($this->_entityPersister, $this->_identifier);
        }
        
    }
}